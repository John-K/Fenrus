@using Fenrus.Components
@model Fenrus.Models.DashboardPageModel
@{
    ViewBag.Title = Model?.Dashboard?.Name?.EmptyAsNull() ?? "Fenrus";
    Layout = "_Layout";
    bool isGuest = false;
    UserSettings settings = Model.Settings;
    var pageHelper = new PageHelper(Model.Translater);

    string dashboardClass = "dashboard ";
    if (Model?.Dashboard?.ShowGroupTitles == false)
        dashboardClass += "hide-group-titles ";
    if (Model?.Dashboard?.ShowStatusIndicators == true)
        dashboardClass += "status-indicators ";

    ViewBag.Background = Model.Dashboard.BackgroundImage ?? string.Empty;
    ViewBag.AccentColor = Model.Dashboard.AccentColor?.EmptyAsNull() ?? "#FF0090";
    ViewBag.BackgroundCOlor = Model.Dashboard.BackgroundColor?.EmptyAsNull() ?? "#009099";
    var systemSearchEngines = ViewBag.SystemSearchEngines as List<SearchEngine>;

    string translations = System.Text.Json.JsonSerializer.Serialize(new
    {
        Edit = Model.Translater.Instant("Labels.Edit"),
        Delete = Model.Translater.Instant("Labels.Delete"),
        EditDashboard = Model.Translater.Instant("ContextMenu.EditDashboard"),
        EditGroup = Model.Translater.Instant("ContextMenu.EditGroup"),
        Terminal = Model.Translater.Instant("ContextMenu.Terminal"),
        UpTime = Model.Translater.Instant("ContextMenu.UpTime"),
        Log = Model.Translater.Instant("ContextMenu.Log"),
        Resize  = Model.Translater.Instant("ContextMenu.Resize"),
        Size_Small = Model.Translater.Instant("Enums.ItemSize.Small"),
        Size_Medium = Model.Translater.Instant("Enums.ItemSize.Medium"),
        Size_Large = Model.Translater.Instant("Enums.ItemSize.Large"),
        Size_Larger = Model.Translater.Instant("Enums.ItemSize.Larger"),
        Size_XLarge = Model.Translater.Instant("Enums.ItemSize.XLarge"),
        Size_XXLarge = Model.Translater.Instant("Enums.ItemSize.XXLarge"),
    });
}

<input type="hidden" id="translations" value="@translations" />

@if (settings.SearchEngines?.Any() == true || systemSearchEngines?.Any() == true)
{
    @(await Html.RenderComponentAsync<SearchComponent>(RenderMode.Static, new
    {
        Settings = settings,
        Model.Translater,
        SystemSearchEngines = systemSearchEngines
    }))
}

<div id="dashboard-name">
    @if(isGuest)
    {
        <text>@(Model.Dashboard.Name == "Default" ? "" : Model.Dashboard.Name)</text>
    }
    else
    {
        <div class="dashboard-dropdown">
            <button>@Model.Dashboard.Name</button>
            <div>
                @{
                    var dbs = settings.Dashboards.Where(x => x.Name != Model.Dashboard.Name).OrderBy(x => x.Name);
                    foreach (var db in dbs)
                    {
                        <a href="#" onclick="changeDashboard('@db.Uid');return false;">@db.Name</a>
                    }
                }
            </div>
        </div>
    }
</div>
    
<div x-uid="@Model.Dashboard.Uid" class="@dashboardClass"
     oncontextmenu="openDefaultContextMenu(event); return false">    
    
    @(await Html.RenderComponentAsync<DashboardComponent>(RenderMode.Static, new
    {
        Model = Model.Dashboard,
        Model.Groups,
        Settings = settings,
        PageHelper = pageHelper,
        Model.Translater
    }))

</div>

@(await Html.RenderComponentAsync<UpTimeComponent>(RenderMode.Static, new
{
    Model.Translater
}))

<div id="launching-app">
    <div class="inner">
        <span class="icon"><img /></span>
        <span class="title"></span>
    </div>
</div>

@if (pageHelper.ScriptBlocks.Any() == true)
{
    foreach (var sb in pageHelper.ScriptBlocks)
    {
        <script>
        @Html.Raw(sb)
        </script>
    }
}
        
@if (Model.Theme.Scripts?.Any() == true)
{
    var dict = settings.ThemeSettings?.ContainsKey(Model.Theme.Name) == true ? settings.ThemeSettings[Model.Theme.Name] : new Dictionary<string, object?>();
    dict ??= new();
    <input type="hidden" id="theme-settings" value="@JsonSerializer.Serialize(dict)" />
    foreach (var script in Model.Theme.Scripts)
    {
        <script src="/themes/@Model.Theme.DirectoryName/@script?version=@Globals.Version" defer></script>
    }
}

@if (string.IsNullOrEmpty(Model?.Dashboard?.Background) == false)
{
    <script>
        document.addEventListener("DOMContentLoaded", function(){
            InitBackground('@Model.Dashboard.Background');
        });
    </script>
}