@using Fenrus.Components
@model Fenrus.Models.DashboardPageModel
@{
    ViewBag.Title = Model?.Dashboard?.Name?.EmptyAsNull() ?? "Fenrus";
    Layout = "_Layout";
    bool isGuest = false;
    UserSettings settings = Model.Settings;
    var pageHelper = new PageHelper();

    string dashboardClass = "dashboard ";
    if (settings.ShowGroupTitles == false)
        dashboardClass += "hide-group-titles ";
    if (settings.ShowStatusIndicators)
        dashboardClass += "status-indicators ";

    ViewBag.Background = Model.Dashboard.BackgroundImage?.EmptyAsNull() ?? settings.BackgroundImage;
    ViewBag.AccentColor = Model.Dashboard.AccentColor?.EmptyAsNull() ?? 
                          settings.AccentColor?.EmptyAsNull() ?? 
                          "#FF0090";
    ViewBag.BackgroundCOlor = Model.Dashboard.BackgroundColor?.EmptyAsNull() ?? "#009099";
}

@if (settings.SearchEngines?.Any() == true)
{
    @(await Html.RenderComponentAsync<SearchComponent>(RenderMode.Static, new
    {
        Settings = settings
    }))
}


<div id="dashboard-name">
    @if(isGuest)
    {
        <text>@(Model.Dashboard.Name == "Default" ? "" : Model.Dashboard.Name)</text>
    }
    else
    {
        <div class="dashboard-dropdown">
            <button>@Model.Dashboard.Name</button>
            <div>
                @{
                    var dbs = settings.Dashboards.Where(x => x.Name != Model.Dashboard.Name).OrderBy(x => x.Name);
                    foreach (var db in dbs)
                    {
                        <a href="#" onclick="changeDashboard('@db.Uid');return false;">@db.Name</a>
                    }
                }
            </div>
        </div>
    }
</div>
    
<div x-uid="@Model.Dashboard.Uid" class="@dashboardClass"
     oncontextmenu="openDefaultContextMenu(event); return false">    
    
    @(await Html.RenderComponentAsync<DashboardComponent>(RenderMode.Static, new
    {
        Model = Model.Dashboard,
        Model.Groups,
        Settings = settings,
        PageHelper = pageHelper
    }))

</div>

@(await Html.RenderComponentAsync<UpTimeComponent>(RenderMode.Static))

<div id="launching-app">
    <div class="inner">
        <span class="icon"><img /></span>
        <span class="title"></span>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {            
        let json = document.getElementById('searchEngines').value;            
        let searchEngines = json ? JSON.parse(json) : [];
        let defaultEngine = searchEngines.filter(x => x.IsDefault);
        let styleFilter = document.getElementById('styleFilter');
        if(defaultEngine?.length)
            defaultEngine = defaultEngine[0];
        else
            defaultEngine = searchEngines[0];
        Alpine.data('SearchSettings', () => ({
            model: {
                SearchText: '',
                SearchEngine: null,
                DefaultEngine: defaultEngine
            },
            init() {
                document.getElementById('search-text').focus();
            },
            filter(filterText) {
                if(!filterText){
                    styleFilter.innerHTML = '';
                    return;
                }                
                styleFilter.innerHTML = `.dashboard .db-item:not([title*="${CSS.escape(filterText)}" i]) { opacity:0.3 }`;
            },
            search() {
                let searchText = this.model.SearchText.trim();
                if(!searchText)
                    return;

                if(/^(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}($|\/)/.test(searchText)){
                    // ip address url, lets just go right there
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^lh:[\d]+/i.test(searchText)){
                    // localhost shortcut
                    window.location = 'http://localhost:' + searchText.substring(3);
                    return;
                }
                if(/^[a-z][a-z\-]*(:[\d]+)?\//i.test(searchText)){
                    // hostname /
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^[a-z][a-z\-]*:[\d]+/i.test(searchText)){
                    // hostname with port
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\-]{1,61}|[a-z0-9-]{1,30}\.[a-z]{2,})$/.test(searchText)){
                    // domainname 
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^((?!-))(xn--)?[a-z0-9][a-z0-9-_]{0,61}[a-z0-9]{0,1}\.(xn--)?([a-z0-9\-]{1,61}|[a-z0-9-]{1,30}\.[a-z]{2,})(\/.*)$/.test(searchText)){
                    // domainname with path 
                    window.location = 'http://' + searchText;
                    return;
                }
                if(/^(http:\/\/|https:\/\/).*$/.test(searchText)){
                    // full url
                    window.location = searchText;
                    return;
                }

                let url = (this.model.SearchEngine || this.model.DefaultEngine || { Url: 'https://duckduckgo.com/?q=%s'}).Url;
                url = url.replace('%s', encodeURIComponent(searchText));
                window.location = url;
            },
            onInput(event) {    
                if(this.model.SearchText[0] === '/'){
                    // special to filter out item                    
                    this.filter(this.model.SearchText.slice(1));
                    return;
                }else {
                    this.filter('');
                }
                if(event.inputType.startsWith('delete'))
                {
                    if(!this.model.SearchText && this.model.SearchEngine){
                        // clear the search engine
                        this.model.SearchEngine = null;
                        return;
                    } 
                }
                if(this.model.SearchEngine)
                    return; // already using a search engine
                if(/^[a-zA-Z]+ /.test(this.model.SearchText)){
                    // matches how a search engine shortcut is used
                    let shortcut = this.model.SearchText.slice(0, -1).toLowerCase();
                    let se = searchEngines.filter(x => x.Shortcut === shortcut);
                    if(!se?.length)
                        return;
                    this.model.SearchEngine = se[0];
                    this.model.SearchText = ' ';
                }
            }
        }));
    });   

</script>

@if (pageHelper.ScriptBlocks.Any() == true)
{
    foreach (var sb in pageHelper.ScriptBlocks)
    {
        <script>
        @Html.Raw(sb)
        </script>
    }
}
        
@if (Model.Theme.Scripts?.Any() == true)
{
    var dict = settings.ThemeSettings?.ContainsKey(Model.Theme.Name) == true ? settings.ThemeSettings[Model.Theme.Name] : new Dictionary<string, object?>();
    dict ??= new();
    <input type="hidden" id="theme-settings" value="@JsonSerializer.Serialize(dict)" />
    foreach (var script in Model.Theme.Scripts)
    {
        <script src="/themes/@Model.Theme.DirectoryName/@script?version=@Globals.Version" defer></script>
    }
}

@if (string.IsNullOrEmpty(Model?.Dashboard?.Background) == false)
{
    <script>
        document.addEventListener("DOMContentLoaded", function(){
            InitBackground('@Model.Dashboard.Background');
        });
    </script>
}