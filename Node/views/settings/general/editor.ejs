<%- include('../head.ejs') %>

<input type="hidden" id="SettingsData" value="<%= settings.toJson(true) %>" />

<div class="editor" x-data="Settings">
    <div class="top-row">
        <span class="title">
            <span class="fa-solid fa-sliders"></span>
            Settings
        </span>
        <span class="buttons">
            <button :disabled="isDisabled()" class="btn" @click="save">Save</button>
            <button :disabled="isDisabled()" class="btn" onclick="document.getElementById('import-file-chooser').click()">Import</button>
            <button :disabled="isDisabled()" class="btn" @click="exportConfig">Export</button>
        </span>
    </div>

    <input :disabled="isDisabled()" style="display:none" id="import-file-chooser" class="import-file-chooser" type="file" accept="application/json" @change="importConfig">

    <div class="general settings-box">
        <div class="setting">
            <span class="label">Theme</span>
            <span class="value">
                <select :disabled="isDisabled()" x-model="model.Theme">
                    <% for(let theme of themes) { %>
                        <option><%= theme %></option>
                    <% } %>    
                </select>
                <span class="help-text">Your personal theme to use.</span>
            </span>
        </div>
        <div class="setting">
            <span class="label">Link Target</span>
            <span class="value">
                <select :disabled="isDisabled()" x-model="model.LinkTarget">
                    <option value="_self">Open in this tab</option>
                    <option value="_blank">Open in new tab</option>
                    <option value="home-portal">Open in same tab</option>
                </select>
                <span class="help-text">Where the shortcuts will open to.</span>
            </span>
        </div>
        <div class="setting">
            <span class="label">Accent</span>
            <span class="value color-picker">
                <input :disabled="isDisabled()" type="text" x-model="model.AccentColor" data-jscolor="{preset:'dark'}" />
                <span class="help-text">The general accent colour of the application</span>
            </span>
        </div>
        <div class="setting">
            <span class="label">Group Titles</span>
            <span class="value">
                <label for="ShowGroupTitles" class="toggle-switchy">
                    <input :disabled="isDisabled()" type="checkbox" id="ShowGroupTitles" x-model="model.ShowGroupTitles" />
                    <span class="toggle">
                        <span class="switch"></span>
                    </span>
                </label>
                <span class="help-text">When off group titles will globally turned off regardless of the individial group setting.</span>
            </span>
        </div>
        <div class="setting">
            <span class="label">Status Indicators</span>
            <span class="value">
                <label for="ShowStatusIndicators" class="toggle-switchy">
                    <input :disabled="isDisabled()" type="checkbox" id="ShowStatusIndicators" x-model="model.ShowStatusIndicators" />
                    <span class="toggle">
                        <span class="switch"></span>
                    </span>
                </label>
                <span class="help-text">If status indicators should be shown on the applications if available.  For example 'Update Available' etc.</span>
            </span>
        </div>
        <div class="setting">
            <span class="label">Background</span>
            <span class="value">
                <div class="background-picker">
                    <!-- Show the image -->
                    <template x-if="model.BackgroundImage">
                        <img :src="model.BackgroundImage" class="image-preview">
                    </template>

                    <div class="buttons">
                        <button :disabled="isDisabled()" class="btn" id="file-chooser-btn" onclick="document.getElementById('file-chooser').click()">
                            Browse...
                        </button>
                        <button :disabled="isDisabled()" class="btn" @click="resetBackground">Reset</button>
                    </div>
                    <input :disabled="isDisabled()" style="display:none" id="file-chooser" class="file-chooser" type="file" accept="image/*" @change="imageChosen">

                </div>
            </span>
        </div>
    </div>
</div>

<script src="/js/settings.js?version=<%= version %>"></script>
<script src="/js/jscolor.min.js"></script>


<script>

    document.addEventListener('alpine:init', () => {
        let json = document.getElementById('SettingsData').value;
        let settings = JSON.parse(json)

        let lsToast = localStorage.getItem('toast_success');
        if(lsToast){
            toast(lsToast, true);
            localStorage.removeItem('toast_success');
        }

        Alpine.data('Settings', () => ({
           model: settings, 
            <%- include('../generic-alpine-editor.js') %>
           save() {
                if(this.isDisabled()) return;

                this.Saved = true;
                if(!this.validate())
                    return false;
                    
                const options = {
                    method: 'POST',
                    body: JSON.stringify(this.model),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                this.setSaving(true);
                fetch('/settings', options).then(async (res) =>{
                    if(!res.ok)
                        throw await res.text();
                    this.markClean();
                    this.setSaving(false);
                    toast('General Settings Saved', true);
                }).catch(err => {
                    this.setSaving(false);
                    toast(err || 'Failed to save', false);
                });
                return true;
            }, 
            resetBackground() {
                this.model.BackgroundImage = '';
            },
            imageChosen(event){
                this.fileToDataUrl(event, src => 
                {
                    this.model.BackgroundImage = src;
                    this.validate();
                })
            },                
            fileToDataUrl(event, callback) {
                if (! event.target.files.length) return;

                let file = event.target.files[0];
                let reader = new FileReader();

                reader.readAsDataURL(file);
                reader.onload = e => callback(e.target.result);
            },
            importConfig(event){
                let files = event.target.files;
                if (files.length === 0) {
                    console.log('No file is selected');
                    return;
                }

                let reader = new FileReader();
                reader.onload = function(event) {
                    let json = event.target.result;
                    fetch('/settings/backup/import', {
                        method: 'POST',     
                        headers: {
                            'content-type': 'application/json'
                        },                    
                        body: json
                    }).then(() => {
                        localStorage.setItem('toast_success', 'Backup restore');
                        location.reload(true);
                    });
                };
                reader.readAsText(files[0]);
            },
            exportConfig(){
                const link = document.createElement('a');
                link.href = '/settings/backup/export?ts=' + new Date().getTime();
                link.download = 'Fenrus-' + new Date().toLocaleDateString() + '.json';
                document.body.appendChild(link)
                link.click()
                document.body.removeChild(link)
            }
        }))
    });
</script>

<%- include('../foot.ejs') %>