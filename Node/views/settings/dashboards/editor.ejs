<%- include('../head.ejs') %>

<% isGuest = model.dashboard.Name === 'Guest'; %>

<input type="hidden" id="DashboardData" value="<%= JSON.stringify(model) %>" />

<div class="editor" x-data="Settings">
    <div class="top-row">
        <span class="title">
            <span class="fa-solid fa-house"></span>
            <% if(isGuest) { %>
                Guest Dashboard                
            <% } else { %>
                Dashboard
            <% } %>
        </span>
        <span class="buttons">
            <button :disabled="isDisabled()" class="btn" @click="save">Save</button>
            <% if(!isGuest) { %>
                <button :disabled="isDisabled()" class="btn" @click="cancel">Cancel</button>
            <% } %>
        </span>
    </div>

    <% if(description) { %>
        <div class="page-description"><%= description %></div>
    <% } %>
     
        <div class="options settings-box">
            <% if(isGuest == false) { %>   
                <div class="setting">
                    <span class="label">Name</span>
                    <span class="value">
                        <input :disabled="isDisabled()" type="text" x-model="model.name" data-rules='["required"]' @blur="blur" @input="input" @keydown.enter="save"/>
                        <span class="help-text">The Name of the dashboard</span>
                    </span>
                </div>
                <div class="setting">
                    <span class="label">Accent</span>
                    <span class="value color-picker">
                        <input :disabled="isDisabled()" type="text" x-model="model.accentColor" data-jscolor="{preset:'dark'}" @blur="blur" @input="input" @keydown.enter="save" />
                        <span class="help-text">The accent colour of the dashboard</span>
                    </span>
                </div>
            <% } %>
            <div class="setting">
                <span class="label">Theme</span>
                <span class="value">
                    <select :disabled="isDisabled()" x-model="model.theme">
                        <% if(isGuest === false) { %>   
                            <option value="">None</option>
                        <% } %>
                        <% for(let theme of themes) { %>
                            <option><%= theme %></option>
                        <% } %>    
                    </select>
                    <span class="help-text">
                        The theme to use on this dashboard.  <%= isGuest ? '' : "Select 'None' to use your default theme." %></span>
                </span>
            </div>   
            <% if(isGuest) { %>   
                <div class="setting">
                    <span class="label">Enabled</span>
                    <span class="value">              
                        <label for="enabled" class="toggle-switchy">
                            <input :disabled="isDisabled()" type="checkbox" id="enabled" x-model="model.enabled" />
                            <span class="toggle">
                                <span class="switch"></span>
                            </span>
                        </label>
                    </span>
                </div>
            <% } %>
            <div class="setting">
                <span class="label">Background</span>
                <span class="value">
                    <div class="background-picker">
                        <template x-if="model.backgroundImage">
                            <img :src="model.backgroundImage" class="image-preview">
                        </template>
    
                        <div class="buttons">
                            <button :disabled="isDisabled()" class="btn" id="file-chooser-btn" onclick="document.getElementById('file-chooser').click()">
                                Browse...
                            </button>
                            <button :disabled="isDisabled()" class="btn" @click="resetBackground">Reset</button>
                        </div>
                        <input :disabled="isDisabled()" style="display:none" id="file-chooser" class="file-chooser" type="file" accept="image/*" @change="imageChosen">
    
                    </div>
                </span>
            </div>
        </div>
    
    <div class="list">
        <div class="list-toolbar">
            <span @click="addGroup">
                <span class="fa-solid fa-plus"></span>
                Add
            </span>
        </div>
        <%     
            allowMove = true;
        %> 
        <%- include('../generic-list.ejs') %>
    </div>

    <%- include('./group-modal.ejs') %>
</div>


<script src="/js/settings.js?version=<%= version %>"></script>
<script src="/js/jscolor.min.js"></script>


<script>

    document.addEventListener('alpine:init', () => {
        let json = document.getElementById('DashboardData').value;
        let data = JSON.parse(json);
        let model = {
            uid: data.dashboard.Uid,
            name: data.dashboard.Name,
            items: data.dashboard.Groups,
            enabled: data.dashboard.Enabled,
            accentColor: data.dashboard.AccentColor,
            backgroundImage: data.dashboard.BackgroundImage,
            theme: data.dashboard.Theme,
            baseUrl: '/settings/groups',
            IsAdmin: <%= isAdmin %>
        };
        Alpine.data('Settings', () => ({
            model: model,
            <%- include('../generic-alpine-editor.js') %>
            save(dontReload) {
                if(this.isDisabled()) return;
                
                this.Saved = true;

                if(!this.validate())
                    return false;
                    
                const options = {
                    method: 'POST',
                    body: JSON.stringify({
                        Uid: this.model.uid,
                        Name: this.model.name,
                        Groups: this.model.items,
                        Enabled: this.model.enabled,
                        AccentColor: this.model.accentColor,
                        Theme: this.model.theme,
                        BackgroundImage: this.model.backgroundImage
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                this.setSaving(true);
                fetch(`/settings/dashboards/${this.model.uid}`, options).then(async (res)=>{
                    if(!res.ok)
                        throw await res.text();
                    this.markClean();
                    <% if(model.dashboard.Name !== 'Guest') { %>
                        window.location = '/settings/dashboards';                                            
                    <% } else { %>
                        this.setSaving(false);
                        toast('Dashboard saved', true);
                    <% } %>
                }).catch(err => {
                    this.setSaving(false);
                    toast(err || 'Failed to save', false);
                });
                return true;
            }, 

            cancel() {
                this.cancelGoto('/settings/dashboards');
            },

            remove(item) {
                console.log('removing', JSON.parse(JSON.stringify(item)));
                confirmPrompt(`Are you sure you want to remove the group "${item.Name}"?`).then(() => 
                {
                    this.model.items = this.model.items.filter(x => x.Uid !== item.Uid);
                }).catch(err => {});
            },
            move(item, up) {
                let index = this.model.items.indexOf(item);
                if(up && index < 1)
                    return;
                if(!up && index >= this.model.items.length - 1)
                    return;
                let dest = index + (up ? -1 : 1);
                let temp = this.model.items[index];
                this.model.items[index] = this.model.items[dest];
                this.model.items[dest] = temp;
            },

            addingGroup: false,
            modalGroups: [],
            hasSystemGroups: false,
            hasNonSystemGroups: false,
            modalGroup: null,
            addGroup() {
                if(this.isDisabled()) return;
                this.modalGroup = null;
                let unavailable = this.model.items.map(x => x.Uid);                
                this.modalGroups = data.groups.filter(x => unavailable.indexOf(x.Uid) === -1);
                this.hasSystemGroups = !!this.modalGroups.find(x => x.IsSystem);
                console.log('hasSystemGroups', this.hasSystemGroups, JSON.parse(JSON.stringify(this.modalGroups)));
                this.hasNonSystemGroups = !!this.modalGroups.find(x => !x.IsSystem);
                this.addingGroup = true;
            },
            modalAdd(){
                if(!this.modalGroup)
                    return; // they need to pick one
                let group = data.groups.find(x => x.Uid == this.modalGroup);
                if(!group)
                    return;
                this.model.items.push({
                    Uid: group.Uid,
                    Name: group.Name,
                    IsSystem: group.IsSystem,
                    Enabled: true
                });
                this.addingGroup = false;
            },
            modalCancel() {
                this.addingGroup = false;
            },


            
            resetBackground() {
                this.model.backgroundImage = '';
            },
            imageChosen(event){
                this.fileToDataUrl(event, src => 
                {
                    this.model.backgroundImage = src;
                    this.validate();
                })
            },                
            fileToDataUrl(event, callback) {
                if (! event.target.files.length) return;

                let file = event.target.files[0];
                let reader = new FileReader();

                reader.readAsDataURL(file);
                reader.onload = e => callback(e.target.result);
            },
        }))
    });
</script>

<%- include('../foot.ejs') %>