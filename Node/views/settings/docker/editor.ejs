<%- include('../head.ejs') %>

<% 
    let baseUrl = '/settings/system/docker';
%> 

<input type="hidden" id="Docker" value="<%= JSON.stringify(model) %>" />

<div class="editor" x-data="Docker">
    <div class="top-row">
        <span class="title">
            <span class="fa-solid fa-microchip"></span>
            Docker
        </span>
        <span class="buttons">
            <button :disabled="isDisabled()" class="btn" @click="save">Save</button>
            <button :disabled="isDisabled()" class="btn" @click="cancel">Cancel</button>
        </span>
    </div>

    <div class="general settings-box">
        <div class="setting">
            <span class="label">Name</span>
            <span class="value">
                <input :disabled="isDisabled()" autofocus type="text" x-model="model.Name" data-rules='["required"]' @blur="blur" @input="input" @keydown.enter="save">
            </span>
        </div>
        <div class="setting">
            <span class="label">Address</span>
            <span class="value">
                <input :disabled="isDisabled()" type="text" x-model="model.Address" @blur="blur" @input="input" @keydown.enter="save">
                <span class="help-text">Address of Docker instance, leave blank for local instance</span>
            </span>
        </div>
        <template x-if="model.Address">
            <div class="setting">
                <span class="label">Port</span>
                <span class="value">
                    <input :disabled="isDisabled()" type="number" x-model="model.Port" data-rules='["required", "min:1", "max:65535"]' @blur="blur" @input="input" @keydown.enter="save">
                </span>
            </div>
        </template>        
    </div>
</div>

<script src="/js/settings.js?version=<%= version %>"></script>
<script src="/js/jscolor.min.js"></script>


<script>

    document.addEventListener('alpine:init', () => {
        let json = document.getElementById('Docker').value;
        let model = JSON.parse(json)
        Alpine.data('Docker', () => ({
           model: model, 
           <%- include('../generic-alpine-editor.js') %>
           save() {
                if(this.isDisabled()) return;

                this.Saved = true;
                if(!this.validate())
                    return false;
                    
                const options = {
                    method: 'POST',
                    body: JSON.stringify(this.model),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
                this.setSaving(true);
                fetch('<%= baseUrl %>/' + encodeURIComponent(this.model.Uid), options).then(res => {
                    if(!res.ok)
                        throw res;
                    
                    this.markClean();
                    window.location.href = '<%= baseUrl %>';
                }).catch(err => {
                    console.log(err);
                    toast('Failed to save', false);
                    this.setSaving(false);
                });
            }, 
            cancel() {
                this.cancelGoto('<%= baseUrl %>');
            }
        }))
    });
</script>

<%- include('../foot.ejs') %>