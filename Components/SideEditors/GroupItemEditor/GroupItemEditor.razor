@namespace Fenrus.Components.SideEditors

@inherits SideEditorBase

<SideEditor Title=@Title @ref=Editor>
    <Buttons>
        @if (IsNew)
        {
            <div class="keep-open">
                <span class="label">@lblKeepOpen</span>
                <FenrusSwitch @bind-Value="KeepOpen" />
            </div>
        }
        <button class="btn" @onclick="() => Save()">@(IsNew ? lblAdd : lblSave)</button>
        <button class="btn" @onclick="() => Cancel()">@lblCancel</button>
    </Buttons>
    <Body>
    <FenrusTabs @ref=Tabs>
        <FenrusTab Title="@lblGeneral">
            <InputSelect Page="GroupItem" TItem="string" Label="Type" @bind-Value="@Model.ItemType">
                <InputSelectOption TItem="string" StringValue="DashboardApp" Label="App" />
                <InputSelectOption TItem="string" StringValue="DashboardLink" Label="Link" />
                <InputSelectOption TItem="string" StringValue="Dashboard" Label="Dashboard" />
                <InputSelectOption TItem="string" StringValue="DashboardTerminal" Label="Terminal" />
            </InputSelect>
            @if (Model.Type == "DashboardApp")
            {
                <InputSelect Page="GroupItem" @ref="AppSelector" TItem="string" Label="App" @bind-Value="@SelectedAppName" Placeholder="Select An App" AllowClear="true" Required="true">
                    <InputSelectGroup TItem="string" Label="Smart Apps" Items="SmartApps" />
                    <InputSelectGroup TItem="string" Label="Basic Apps" Items="BasicApps" />
                </InputSelect>
            }
            else if (Model.Type == "DashboardTerminal")
            {
                <InputSelect Page="GroupItem" TItem="string" Label="Terminal" @bind-Value="@Model.TerminalType">
                    <InputSelectOption TItem="string" StringValue="SSH" Label="SSH" />
                    @if (DockerServers.Any())
                    {
                        <InputSelectOption TItem="string" StringValue="Docker" Label="Docker"/>
                    }
                </InputSelect>
            }
            <InputText Page="GroupItem" @bind-Value="@Model.Name" Label="Name" Required="true"></InputText>
            @if (Model.Type == "DashboardApp" || Model.Type == "DashboardLink")
            {
                <InputSelect Page="GroupItem" TItem="string" Label="Target" @bind-Value="@Model.Target">
                    <InputSelectOption TItem="string" StringValue="Default" Label="Default" />
                    <InputSelectOption TItem="string" StringValue="IFrame" Label="IFrame" />
                </InputSelect>
                <InputText @bind-Value="@Model.Url" Label="URL" Required="true" Pattern="^[^:]+://."></InputText>
            }
            <InputSelect Page="GroupItem" TItem="string" Label="Size" @bind-Value="@Model.SizeString">
                <InputSelectOption TItem="string" Value="nameof(ItemSize.Small)" Label="Small" />
                <InputSelectOption TItem="string" Value="nameof(ItemSize.Medium)" Label="Medium" />
                <InputSelectOption TItem="string" Value="nameof(ItemSize.Large)" Label="Large" />
                <InputSelectOption TItem="string" Value="nameof(ItemSize.Larger)" Label="Larger" />
                <InputSelectOption TItem="string" Value="nameof(ItemSize.XLarge)" Label="X-Large" />
                <InputSelectOption TItem="string" Value="nameof(ItemSize.XXLarge)" Label="XX-Large" />
            </InputSelect>
            <InputImage Page="GroupItem" @bind-value="Model.Icon" Label="Icon">
                <PreviewTemplate Context="previewIcon">
                    @{
                        string icon = previewIcon;
                        if (string.IsNullOrEmpty(icon))
                        {
                            if (Model.Type == "DashboardApp" && string.IsNullOrEmpty(Model.AppName) == false)
                                icon = "/apps/" + Model.AppName + "/app.png";
                            else
                                icon = "/favicon";
                        }
                        else if (icon.StartsWith("db:/image/"))
                            icon = "/fimage/" + icon["db:/image/".Length..];
                        icon += "?version=" + Globals.Version;
                        bool carousel = (Model.Size < ItemSize.Large || Model.Type != "DashboardApp" || SelectedApp == null || 
                                         SelectedApp.Carousel == false) == false;
                        string iconClass = "db-item " +
                                           (Model.Type == "DashboardLink" ? "db-link " : string.Empty) +
                                           (Model.Type == "DashboardApp" ? "db-app " : string.Empty) +
                                           (carousel == false ? "db-basic " : string.Empty) +
                                           Model.Size.ToString().ToLower().Replace("xl", "x-l") + " " +
                                           (carousel ? "carousel " : string.Empty);
                        <a class="@iconClass">
                            <div class="inner">
                                <div class="icon">
                                    <img src="@icon" class="icon-pick">
                                </div>
                                <div class="content">
                                    <div class="title">@Model.Name</div>
                                    @if (carousel == false)
                                    {
                                        <div class="status">
                                            <ul class="livestats">
                                                <li><span class="title">Sample</span><span class="value">1234</span></li>
                                                <li><span class="title">Other</span><span class="value">5657</span></li>
                                            </ul>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="status">
                                            <div class="carousel">
                                                <div class="item visible">
                                                    <div class="fill" style="background:#333">
                                                        <div class="name tr">Sample item</div>
                                                        <div class="br">2010</div>
                                                        <a class="app-icon"><img src="@icon"></a>
                                                    </div>
                                                </div>
                                                <div class="controls">
                                                    <a></a><a></a><a></a><a></a><a></a><a></a>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="arrow"></div>
                            </div>
                        </a>
                    }
                </PreviewTemplate>
            </InputImage>
            @if (Model.Type == "DashboardApp" || Model.Type == "DashboardLink")
            {
                <InputSwitch Page="GroupItem" @bind-Value="@Model.Monitor" Label="Monitor" />
            }
        </FenrusTab>
            
        <FenrusTab Title="@lblProperties" Visible="@(Model.Type == "DashboardApp" && SelectedApp != null)">
            <InputText Page="GroupItem" @bind-Value="@Model.ApiUrl" Label="ApiUrl" ></InputText>
            @if (SelectedApp?.Properties != null)
            {
                foreach (var prop in SelectedApp.Properties)
                {
                    switch (prop.Type)
                    {
                        case AppPropertyType.Bool:
                            <InputSwitch Label="@prop.Name" Help="@prop.Help" Value="@(Model.GetValue(prop) as bool? == true)" ValueChanged="((val) => Model.SetValue(prop, val))"/>
                            break;
                        case AppPropertyType.String:
                            <InputText Label="@prop.Name" Help="@prop.Help" Value="@(Model.GetValue(prop) as string ?? string.Empty)" ValueChanged="((val) => Model.SetValue(prop, val))"/>
                            break;
                        case AppPropertyType.Password:
                            <InputText Label="@prop.Name" Help="@prop.Help" Password="true" Value="@(Model.GetValue(prop) as string ?? string.Empty)" ValueChanged="((val) => Model.SetValue(prop, val))"/>
                            break;
                        case AppPropertyType.Select:
                            <InputSelect TItem="string" Label="@prop.Name" Help="@prop.Help" 
                                         Value="@(Model.GetValue(prop) as string ?? string.Empty)" 
                                         ValueChanged="((val) => Model.SetValue(prop, val))" 
                                         Options="@prop.Options"/>
                            break;
                    }
                }
            }
            
            <InputSwitch Page="GroupItem" @bind-Value="Model.Debug" Label="@nameof(Model.Debug)" />
            
            @if (SelectedApp?.TestFunction == true)
            {
                <button disabled="@Testing" class="btn test-button" @onclick="() => TestApp()">@(Testing ? lblTesting : lblTest)</button>
            }
        </FenrusTab>
            
        <FenrusTab Title="@lblSsh" Visible="@(Model.Type != "DashboardTerminal" || Model.TerminalType == "SSH")">
            <p>@lblSshDescription</p>
            <InputText Page="GroupItem" @bind-Value="@Model.SshServer" Label="SshAddress" />
            <InputText Page="GroupItem" @bind-Value="@Model.SshUserName" Label="SshUsername"/>
            <InputText Page="GroupItem" @bind-Value="@Model.SshPassword" Label="SshPassword" />
        </FenrusTab>
            
        @if (DockerServers.Any())
        {
            <FenrusTab Title="@lblDocker" Visible="@(Model.Type != "DashboardTerminal" || Model.TerminalType == "Docker")">
                <p>@lblDockerDescription</p>
                @if (Model.Type != "DashboardTerminal")
                {
                    <p>@lblDockerTerminalDescription</p>
                }
                <InputSelect Page="GroupItem" @bind-Value="@Model.DockerUid" Label="DockerUid" Options="DockerServers"/>
                @if (Model.DockerUid != null && Model.DockerUid != Guid.Empty)
                {
                    <InputText Page="GroupItem" @bind-Value="@Model.DockerContainer" Label="DockerContainer"/>
                    <InputSelect Page="GroupItem" TItem="string" Label="DockerCommand" @bind-Value="@Model.DockerCommand">
                        <InputSelectOption TItem="string" StringValue="/bin/ash" Label="/bin/ash"/>
                        <InputSelectOption TItem="string" StringValue="/bin/bash" Label="/bin/bash"/>
                        <InputSelectOption TItem="string" StringValue="/bin/sh" Label="/bin/sh"/>
                    </InputSelect>
                }
            </FenrusTab>
        }
            
        <FenrusTab Title="@lblInfo" Visible="@(Model.Type == "DashboardApp" && SelectedApp?.Info != null)">
            @if (SelectedApp?.Info != null)
            {
                <table>
                    @if (SelectedApp?.Info?.Authors?.Any() == true)
                    {
                        <tr>
                            <td>@lblAuthor</td>
                            <td>@string.Join(", ", SelectedApp.Info.Authors)</td>
                        </tr>
                    }
                    <tr>
                        <td>@lblApplicationUrl</td>
                        <td>
                            <a href="@SelectedApp.Info.AppUrl" rel="noreferrer" target="_blank">@SelectedApp.Info.AppUrl</a>
                        </td>
                    </tr>
                </table>
            }
        </FenrusTab>
    </FenrusTabs>
    </Body>
</SideEditor>